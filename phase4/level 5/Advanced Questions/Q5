عند تطوير متجر إلكتروني متعدد اللغات في Django، يمكن التعامل مع الترجمة والنصوص باستخدام نظام التدويل (Internationalization - i18n) والترجمة (Localization - l10n). إليك الخطوات الأساسية:


---

1. تمكين الترجمة في الإعدادات

في ملف settings.py، قم بتمكين الترجمة وتحديد اللغات المتاحة:

from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ('en', _('English')),
    ('ar', _('Arabic')),
    ('fr', _('French')),
]

LANGUAGE_CODE = 'en'  # اللغة الافتراضية
USE_I18N = True  # تفعيل التدويل
USE_L10N = True  # تفعيل التوطين

LOCALE_PATHS = [
    BASE_DIR / 'locale/',  # مجلد تخزين ملفات الترجمة
]


---

2. استخدام وظائف الترجمة في القوالب والكود

في الكود Python (داخل الـ Views، Models، Forms، إلخ):

استخدم gettext أو gettext_lazy للترجمة:

from django.utils.translation import gettext_lazy as _

class Product(models.Model):
    name = models.CharField(max_length=255, verbose_name=_("Product Name"))
    description = models.TextField(verbose_name=_("Description"))

في القوالب HTML:

استخدم {% trans %} أو {% blocktrans %}:

<h1>{% trans "Welcome to our store" %}</h1>

<p>{% blocktrans %}This is a multilingual e-commerce platform.{% endblocktrans %}</p>


---

3. استخراج النصوص للترجمة

استخدم الأمر التالي لاستخراج النصوص القابلة للترجمة من المشروع:

django-admin makemessages -l ar

سيتم إنشاء ملف django.po داخل locale/ar/LC_MESSAGES/، حيث يمكنك إضافة الترجمات.


---

4. ترجمة النصوص في ملف django.po

افتح الملف locale/ar/LC_MESSAGES/django.po وأضف الترجمات:

msgid "Welcome to our store"
msgstr "مرحبًا بكم في متجرنا"

ثم قم بتحديث الترجمة:

django-admin compilemessages


---

5. تحديد لغة المستخدم

لتغيير اللغة ديناميكيًا بناءً على تفضيلات المستخدم، أضف Middleware الترجمة إلى MIDDLEWARE في settings.py:

MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    ...
]

ثم استخدم set_language في الـ views للسماح للمستخدمين بتغيير اللغة:

<form action="{% url 'set_language' %}" method="post">
    {% csrf_token %}
    <select name="language">
        <option value="en">English</option>
        <option value="ar">العربية</option>
        <option value="fr">Français</option>
    </select>
    <button type="submit">Change Language</button>
</form>


---

6. دعم الترجمة في الروابط

يمكنك ضبط روابط الموقع لتكون متوافقة مع اللغة المختارة باستخدام i18n_patterns في urls.py:

from django.urls import path
from django.conf.urls.i18n import i18n_patterns
from . import views

urlpatterns = i18n_patterns(
    path('', views.home, name='home'),
    path('products/', views.products, name='products'),
)


---